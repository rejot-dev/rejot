---
description: Alwayss
globs: **
alwaysApply: false
---

# This repository is a monorepo

# Monorepo Structure and Guidelines

## Overview
- Code is organized by domain functionality rather than technical implementation

## General Rules
- Don't add unneccesary prefixes to errors such as "Internal Error:"
- Prefer to throw instead of logging a warning and returning something empty.
- Don't add comments clarifying your changes. Comments should mostly explain WHY code looks like it does.

## File Naming Conventions
### General Pattern
- Use dots to indicate the main object: `organization.repository.ts`
- Use dots to indicate file types
- Examples:
  - Main files: `organization.service.ts`, `organization.routes.ts`
  - Test files: `organization.repository.test.ts`

## Code Style
### Import Organization
Sort imports in this order (with blank line between categories):
1. External imports (npm)
2. Monorepo imports
3. Local imports
- Within each category: alphabetical order
- Type-only imports last

### Importing Rules
- When at all possible DO NOT export types.
- PREFER to recreate types instead of importing them. E.g. a component defines its own types, so do services and repositories.
- Do NOT export 'default', only use named exports.
- Prefix node built-in imports with `node:`

## Other
- Prefer to destruct objects in things like for-loops.

## API Development
### Architecture
- REST APIs built with Hono framework
- OpenAPI specifications:
  - Location: `./packages/api-interface-*`
  - Example: [organizations.api.ts](mdc:packages/api-interface-controller/organizations.api.ts)
- Implementation:
  - Located in specific apps, such as ./apps/controller
  - Example: [organization-routes.ts](mdc:apps/controller/src/organization/organization-routes.ts)

## Technology Stack
### Core Technologies
- Hono for REST APIs
- Zod for schema validation and type safety
- Domain-driven organization structure

