name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  install:
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.get-packages.outputs.packages }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Cache dependencies
        uses: actions/cache/save@v4
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/bun.lock') }}

      - name: Define packages
        id: get-packages
        run: echo "packages=$(./scripts/list_workspace_packages.sh)" >> $GITHUB_OUTPUT

  check-prettier:
    needs: install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Restore dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/bun.lock') }}

      - name: Check formatting
        run: bun run format:check

  check-eslint:
    needs: install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Restore dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/bun.lock') }}

      - name: Run linter
        run: bun run lint

  typecheck:
    needs: install
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: ${{ fromJSON(needs.install.outputs.packages) }}
      fail-fast: false

    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Restore dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/bun.lock') }}

      - name: Type check ${{ matrix.package }}
        working-directory: ${{ matrix.package }}
        run: bun check

  check-package-sync:
    needs: install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Restore dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/bun.lock') }}

      - name: Type check sync
        working-directory: packages/sync
        run: bun check

      - name: Run sync tests
        working-directory: packages/sync
        run: bun test
        env:
          # Bug in Bun
          SKIP_SYNC_HTTP_SERVICE_TESTS: true

  test-postgres:
    needs: install
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: "Set wal_level=logical"
        run: |
          docker exec ${{ job.services.postgres.id }} sh -c 'echo "wal_level=logical" >> /var/lib/postgresql/data/postgresql.conf'
          docker restart ${{ job.services.postgres.id }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.8

      - name: Restore dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/bun.lock') }}

      - name: Create Database Schema
        working-directory: apps/controller
        run: bunx drizzle-kit --config=_ci/ci-test-drizzle.config.ts migrate

      - name: Generate and check for unstaged migrations
        working-directory: apps/controller
        run: |
          bunx drizzle-kit --config=_ci/ci-test-drizzle.config.ts generate
          if ! git diff --quiet drizzle/; then
            echo "Error: Found unstaged migration files in apps/controller/drizzle"
            echo "New/modified migration files:"
            git status drizzle/
            echo "Contents of modified SQL files:"
            (git ls-files -m drizzle/ && git ls-files --others --exclude-standard drizzle/) | grep '\.sql$' | while read file; do
              echo -e "\n=== $file ===\n"
              cat "$file"
            done
            exit 1
          fi

      - name: Run controller (database) tests
        working-directory: apps/controller
        env:
          REJOT_CONTROLLER_CONFIG_PATH: ./_ci/ci-test-config.json
        run: bun test

      - name: Run rejot-cli (database) tests
        working-directory: apps/rejot-cli
        env:
          REJOT_SYNC_CLI_TEST_CONNECTION: postgresql://postgres:postgres@localhost:5432/test
        run: bun test

      - name: Run adapter-postgres (database) tests
        working-directory: packages/adapter-postgres
        env:
          REJOT_SYNC_CLI_TEST_CONNECTION: postgresql://postgres:postgres@localhost:5432/test
        run: bun test
