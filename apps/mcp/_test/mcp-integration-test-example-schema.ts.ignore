import {
  createPostgresConsumerSchemaConfig,
  createPostgresPublicSchemaTransformations,
  PostgresPublicSchemaConfigBuilder,
} from "@rejot-dev/adapter-postgres";
import { createConsumerSchema } from "@rejot-dev/contract/consumer-schema";
import { createPublicSchema } from "@rejot-dev/contract/public-schema";

const testPublicSchema = createPublicSchema("public-account", {
  source: { dataStoreSlug: "data-store-1" },
  outputSchema: {
    type: "object",
    properties: {
      id: { type: "number" },
      email: { type: "string" },
      name: { type: "string" },
    },
    required: ["id", "email", "name"],
  },
  config: new PostgresPublicSchemaConfigBuilder()
    .addTransformation(
      createPostgresPublicSchemaTransformations(
        "insertOrUpdate",
        "account",
        "SELECT id, email, username as name FROM account WHERE id = :id",
      ),
    )
    .build(),
  version: {
    major: 1,
    minor: 0,
  },
});

const testConsumerSchema = createConsumerSchema("consume-public-x-account", {
  source: {
    manifestSlug: "default",
    publicSchema: {
      name: "public-account",
      majorVersion: 1,
    },
  },
  config: createPostgresConsumerSchemaConfig(
    "data-destination-1",
    `
      INSERT INTO users_destination 
        (id, full_name)
      VALUES 
        (:id, :email || ' ' || :name)
      ON CONFLICT (id) DO UPDATE
        SET full_name = :email || ' ' || :name
      ;
    `,
    {
      deleteSql: "DELETE FROM users_destination WHERE id = :id",
    },
  ),
});

export default {
  testPublicSchema,
  testConsumerSchema,
};
