---
import { type CollectionEntry, getCollection } from "astro:content";
import { render } from "astro:content";
import Bars3BottomLeftIcon from "astro-heroicons/mini/Bars3BottomLeft.astro";
import XMarkIcon from "astro-heroicons/mini/XMark.astro";

import PreWithCopy from "@/components/PreWithCopy.astro";
import SearchModal from "@/components/SearchModal.astro";

import CollectionNavigation from "../../components/CollectionNavigation.astro";
import { type CollectionNavigationEntry } from "../../components/CollectionNavigation.astro";
import Prose from "../../components/Prose.astro";
import TableOfContents from "../../components/TableOfContents.astro";
import { pageTitle } from "../../consts";
import Base from "../../layouts/Base.astro";
import { normalizeSlug } from "../../util/helpers";
export async function getStaticPaths() {
  const docsEntries = await getCollection("docs");
  return docsEntries
    .filter((entry) => !entry.filePath?.includes("index.md"))
    .map((entry) => ({
      params: { slug: normalizeSlug(entry.id) || undefined },
      props: entry,
    }));
}

type Props = CollectionEntry<"docs">;

const post = Astro.props;
const { Content, headings } = await render(post);
const collection = await getCollection("docs");
const docNavigationEntries: CollectionNavigationEntry[] = collection
  .filter((entry) => {
    if (entry.id === "index") {
      return false;
    }
    return true;
  })
  .map((entry) => ({
    title: entry.data.title,
    slug: normalizeSlug(entry.id),
    item: entry,
  }));
---

<Base title={pageTitle(post.data.title)} description="">
  <div class="mx-auto w-full max-w-[1400px]">
    <SearchModal />
    <div class="flex flex-col lg:flex-row lg:space-x-4">
      <!-- Mobile navigation overlay - hidden by default -->
      <div
        id="mobile-overlay"
        class="fixed inset-0 z-30 hidden bg-black/50 transition-opacity duration-300 lg:hidden"
      >
      </div>

      <!-- Navigation sidebar - hidden on mobile by default, shown when toggled -->
      <aside
        id="sidebar"
        class="fixed inset-y-0 -left-full z-40 w-96 -translate-x-full overflow-y-auto border-r border-gray-200 bg-gray-50 transition-transform duration-300 ease-in-out lg:sticky lg:left-0 lg:top-16 lg:z-0 lg:h-screen lg:translate-x-0 dark:border-gray-700 dark:bg-rejot-black-950"
      >
        <!-- Close button for mobile -->
        <div class="flex justify-end">
          <button id="close-sidebar" class="rounded p-1 lg:hidden">
            <XMarkIcon class="size-6" />
          </button>
        </div>

        <CollectionNavigation
          collection={docNavigationEntries}
          currentPath={post.id}
          basePath="docs"
        />
      </aside>

      <!-- Main content -->
      <div class="w-full max-w-none space-y-4">
        <!-- Mobile navigation header - visible only on mobile -->
        <div class="flex items-center space-x-2 border-gray-200 lg:space-x-0 dark:border-gray-700">
          <button id="mobile-nav-toggle" class="p-2 lg:hidden dark:bg-gray-800">
            <Bars3BottomLeftIcon class="size-6" />
          </button>
          <h1 class="text-4xl font-bold">{post.data.title}</h1>
        </div>
        <Prose>
          <Content
            components={{
              pre: PreWithCopy,
            }}
          />
        </Prose>
      </div>

      <!-- Table of contents -->
      <aside
        class="hidden w-full border-l border-gray-200 px-4 xl:block xl:w-80 dark:border-gray-700"
      >
        <TableOfContents headings={headings} />
      </aside>
    </div>
  </div>
</Base>

<script>
  // This script handles the mobile navigation functionality
  document.addEventListener("DOMContentLoaded", function () {
    // Get DOM elements
    const mobileNavToggle = document.getElementById("mobile-nav-toggle");
    const closeButton = document.getElementById("close-sidebar");
    const sidebar = document.getElementById("sidebar");
    const overlay = document.getElementById("mobile-overlay");

    // Open sidebar function
    function openSidebar() {
      if (sidebar && overlay) {
        sidebar.classList.remove("-translate-x-full");
        sidebar.classList.remove("-left-full");
        sidebar.classList.add("left-0");
        overlay.classList.remove("hidden");
        document.body.classList.add("overflow-hidden");
      }
    }

    // Close sidebar function
    function closeSidebar() {
      if (sidebar && overlay) {
        sidebar.classList.add("-translate-x-full");
        sidebar.classList.remove("left-0");
        sidebar.classList.add("-left-full");
        overlay.classList.add("hidden");
        document.body.classList.remove("overflow-hidden");
      }
    }

    // Add event listeners
    if (mobileNavToggle) {
      mobileNavToggle.addEventListener("click", openSidebar);
    }

    if (closeButton) {
      closeButton.addEventListener("click", closeSidebar);
    }

    if (overlay) {
      overlay.addEventListener("click", closeSidebar);
    }

    // Close sidebar when pressing escape key
    document.addEventListener("keydown", function (e) {
      if (e.key === "Escape") {
        closeSidebar();
      }
    });

    // Handle resize events
    window.addEventListener("resize", function () {
      if (window.innerWidth >= 1024) {
        // lg breakpoint
        if (overlay) overlay.classList.add("hidden");
        document.body.classList.remove("overflow-hidden");
      }
    });
  });
</script>
