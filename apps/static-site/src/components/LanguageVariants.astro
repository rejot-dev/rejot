---
import { Code } from "astro:components";
import type { BuiltinLanguage } from "shiki";

import PartialCode from "./PartialCode.astro";
import PreWithCopy from "./PreWithCopy.astro";

interface Props {
  class?: string;
  languages: ({
    title: string;
    lang: BuiltinLanguage;
    code: string;
  } & {
    title: string;
    lang: BuiltinLanguage;
    code: string;
    part: string;
  })[];
}

const { class: className = "", languages = [] } = Astro.props;

/*
<LanguageVariants
  languages={[
    {
      title: "TypeScript",
      lang: "typescript",
      code: `const foo = 'bar';`,
    },
    {
      title: "Python",
      lang: "python",
      code: `foo = 'bar'`,
      part: "consumerSchemaSql",
    },
  ]}
/>
*/
---

<!-- Use a custom color (#24292e) for the background, as it is the background of a Markdown code block. -->
<div
  class={`not-prose rejot-language-variants rounded-lg border border-gray-200 bg-white p-2 lg:max-w-4xl dark:border-gray-700 dark:bg-[#24292e] ${className}`}
>
  <div class="mb-1 flex gap-2 border-b border-gray-200 dark:border-gray-700">
    {
      languages.map((lang) => (
        <button
          class="rejot-language-variant-button rounded-t-lg px-4 py-2 text-sm font-medium text-gray-500 hover:bg-gray-100 dark:text-gray-400 dark:hover:bg-gray-700"
          data-tab={`${lang.lang}-${lang.title}`}
        >
          {lang.title}
        </button>
      ))
    }
  </div>
  {
    languages.map((lang) => (
      <div
        class="hidden w-full overflow-x-auto overflow-y-hidden p-2"
        data-content={`${lang.lang}-${lang.title}`}
      >
        {lang.part && <PartialCode code={lang.code} lang={lang.lang} part={lang.part} />}
        {!lang.part && (
          <PreWithCopy noWrapper>
            <Code
              code={lang.code}
              lang={lang.lang}
              themes={{
                light: "github-light",
                dark: "github-dark",
              }}
            />
          </PreWithCopy>
        )}
      </div>
    ))
  }
</div>

<script>
  // Helper to extract language from data-tab (format: lang-title)
  function getLangFromTab(tab: Element) {
    return (tab as HTMLElement).dataset["tab"]!.split("-")[1];
  }

  document.addEventListener("click", (event) => {
    const target = event.target as HTMLElement | null;
    if (!target) return;
    const tab = target.closest("[data-tab]") as HTMLElement | null;
    if (!tab) return;

    const lang = getLangFromTab(tab);
    if (!lang) return;

    // For each language variant group
    document.querySelectorAll(".rejot-language-variants").forEach((root) => {
      const tabs = root.querySelectorAll("[data-tab]") as NodeListOf<HTMLElement>;
      const contents = root.querySelectorAll("[data-content]") as NodeListOf<HTMLElement>;
      tabs.forEach((t) => {
        const tLang = getLangFromTab(t);
        if (tLang === lang) {
          // Remove active class from all tabs
          tabs.forEach((tt) =>
            tt.classList.remove("text-rejot-red-600", "border-b-2", "border-rejot-red-600"),
          );
          // Add active class to this tab
          t.classList.add("text-rejot-red-600", "border-b-2", "border-rejot-red-600");
          // Hide all contents
          contents.forEach((content) => content.classList.add("hidden"));
          // Show selected content
          const content = root.querySelector(
            `[data-content="${t.dataset["tab"]}"]`,
          ) as HTMLElement | null;
          if (content) content.classList.remove("hidden");
        }
      });
    });
  });

  document.querySelectorAll(".rejot-language-variants").forEach((root) => {
    const tabs = root.querySelectorAll("[data-tab]") as NodeListOf<HTMLElement>;
    if (tabs.length > 0) {
      tabs[0].click();
    }
  });
</script>
