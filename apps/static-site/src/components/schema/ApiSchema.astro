---
import {
  extractSchemaItems,
  type JSONSchema,
  resolveRef,
  type SchemaItem,
} from "../../util/schema-helper";

interface Props {
  schemaRef: string;
  globalSchema: JSONSchema;
  externalKeys?: string[];
}

const { schemaRef, globalSchema, externalKeys = [] } = Astro.props as Props;

// Resolve and extract
const targetSubSchema = resolveRef(schemaRef, globalSchema);
if (!targetSubSchema) {
  throw new Error(`Failed to resolve schema ref: ${schemaRef}`);
}
const items: SchemaItem[] = extractSchemaItems(targetSubSchema, globalSchema);

// Helper to derive display name and doc path from schema key
function deriveInfoFromKey(key: string): { name: string; path: string } {
  // Remove trailing 's' if key ends with 's' and is not just 's'
  const singularKey = key.length > 1 && key.endsWith("s") ? key.slice(0, -1) : key;
  // Capitalize first letter
  const name = singularKey.charAt(0).toUpperCase() + singularKey.slice(1);
  // Simple kebab-case for path generation (e.g., publicSchemas -> public-schema)
  const kebabKey = singularKey
    .replace(/([a-z])([A-Z])/g, "$1-$2") // camelCase to kebab-case
    .toLowerCase();
  const docPath = `/docs/spec/${kebabKey}`;
  return { name, path: docPath };
}
---

<div class="not-prose space-y-2">
  {
    items.map((item) => {
      const { name: derivedName, path: derivedPath } = deriveInfoFromKey(item.key);
      // Determine if the item represents an array type for display purposes
      const isArray =
        item.valueType === "array" ||
        item.valueType === "array[object]" ||
        (item.type === "ref" && item.valueType === "array");

      return (
        <div class="flex items-start rounded-lg bg-gray-100 p-2 dark:bg-gray-700">
          <div class="flex-1">
            <div class="flex items-center flex-wrap">
              {/* Key */}
              <span class="font-mono text-sm font-medium text-gray-900 dark:text-gray-100">
                {item.key}:
              </span>

              {/* Type/Link */}
              <span class="ml-2 text-sm text-gray-500 dark:text-gray-400">
                {(() => {
                  const isExternal = externalKeys.includes(item.key);
                  const linkHref = isExternal ? derivedPath : `#${item.key}`;
                  const linkClass =
                    "text-blue-600 hover:text-blue-800 hover:underline dark:text-blue-400 dark:hover:text-blue-300";

                  if (item.type === "ref") {
                    // Handle explicit refs (object or array)
                    return (
                      <a href={linkHref} class={linkClass}>
                        {item.valueRefName || derivedName}
                        {isArray ? "[]" : ""}
                      </a>
                    );
                  } else if (item.valueType === "object" && item.type === "key") {
                    // Handle inline objects
                    return (
                      <a href={linkHref} class={linkClass}>
                        {derivedName}
                      </a>
                    );
                  } else if (item.valueType === "array[object]" && item.type === "key") {
                    // Handle inline array[object]
                    return (
                      <a href={linkHref} class={linkClass}>
                        {derivedName}[]
                      </a>
                    );
                  } else {
                    // Handle simple types (string, number, array[string], etc.)
                    return <span>{item.valueType}</span>;
                  }
                })()}
              </span>

              {/* Enum Badge */}
              {item.enumValues && (
                <span class="ml-2 text-sm font-medium text-emerald-600 dark:text-emerald-400">
                  [enum]
                </span>
              )}

              {/* Const Badge */}
              {item.constValue !== undefined && (
                <span class="ml-2 text-sm font-medium text-purple-600 dark:text-purple-400">
                  [const]
                </span>
              )}

              {/* Required Badge */}
              {item.required && (
                <span class="ml-2 rounded text-xs font-medium text-red-600">required</span>
              )}
            </div>

            {/* Enum Values on New Line */}
            {item.enumValues && (
              <div class="mt-1 ml-4 text-sm text-gray-500 dark:text-gray-400 font-mono">
                = {item.enumValues.map((v) => `"${v}"`).join(" | ")}
              </div>
            )}

            {/* Const Value on New Line */}
            {item.constValue !== undefined && (
              <div class="mt-1 ml-4 text-sm text-gray-500 dark:text-gray-400 font-mono">
                = "{item.constValue}"
              </div>
            )}

            {/* Description */}
            {item.description && (
              <p class="mt-1 text-sm text-gray-600 dark:text-gray-300">{item.description}</p>
            )}
          </div>
        </div>
      );
    })
  }
</div>
